1:springboot 整合mybatis 如何开启驼峰命名(在查询的时候,会把db中的_转为驼峰 比如user_name 转为userName)
  方式一:)不管是注解还是基于配置文件.xml的方式整合mybaits  在.yml文件中加入（推荐使用）
  mybatis.configuration.map-underscore-to-camel-case=true 的配置就可以了
  方式二:)若是在注解的方式,需要加入如下配置类
  @org.springframework.context.annotation.Configuration
  public class MyBatisConfig {
      @Bean
      public ConfigurationCustomizer configurationCustomizer(){
          return new ConfigurationCustomizer(){

              @Override
              public void customize(Configuration configuration) {
                  configuration.setMapUnderscoreToCamelCase(true);
              }
          };
      }
  }
  方式三:)整合.xml文件的方式  只需要在mybatis-config.xml的总配置文件中加入如下配置
  <settings>
      <setting name="mapUnderscoreToCamelCase" value="true"/>
  </settings>

springboot 自定义注解 以及校验器
    第一步:定义一个自定义校验注解
    @Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER})
    @Retention(RetentionPolicy.RUNTIME)
    @Documented
    @Constraint(
            validatedBy = {MobileValidator.class} //自定义的校验解析器
    )
    public @interface IsMobile {

        boolean requried() default true;

        String message() default "手机格式错误";

        Class<?>[] groups() default { };

        Class<? extends Payload>[] payload() default { };

    }

    第二步:编写一个自定义的校验器
        public class MobileValidator implements ConstraintValidator<IsMobile, String> {

            private boolean isRequired=false;

            @Override
            public void initialize(IsMobile isMobile) {
                isRequired = isMobile.requried();
            }

            @Override
            public boolean isValid(String s, ConstraintValidatorContext constraintValidatorContext) {
                if(!isRequired){
                    return false;
                }else {
                    if(StringUtils.isEmpty(s)) {
                        return false;
                    }else{
                        return ValidatorUtils.checkMobileFormat(s);
                    }
                }
            }
        }

第三个知识点:如何扩展webmvc的功能  自定义配置类继续 WebMvcConfigurerAdapter  去实现需要扩展的功能
@Configuration
public class WebConfig extends WebMvcConfigurerAdapter{

    @Autowired
    UserArgumentResolver userArgumentResolver;

    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
        argumentResolvers.add(userArgumentResolver);
    }
}

1)自定义的参数解析器

@Component
public class UserArgumentResolver implements HandlerMethodArgumentResolver {

    @Autowired
    private SSkillUserServiceImpl ssKillUserServiceImpl;

    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        boolean isSupport = false;
        Class<?> clazz = parameter.getParameterType();
        if(clazz == SSkillUser.class) {
            isSupport = true;
        }
        return isSupport;
    }

    @Override
    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);
        HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class);

        String requestCookieValue = request.getParameter(MDA.TOKEN_NAME);
        String cookieValue = ssKillUserServiceImpl.findLoginToken(request);
        if(StringUtils.isEmpty(requestCookieValue) && StringUtils.isEmpty(cookieValue)) {
            return null;
        }
        String token = StringUtils.isEmpty(cookieValue)?requestCookieValue:cookieValue;

        return ssKillUserServiceImpl.getByToken(response,token);
    }
}




